map "http://fhir.ch/ig/cda-fhir-maps/StructureMap/BundleToCda" = "BundleToCda"

uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias Bundle as source
uses "http://hl7.org/fhir/StructureDefinition/Address" alias Bundle as source
uses "http://hl7.org/fhir/StructureDefinition/dateTime" alias dateTime as source
uses "http://hl7.org/fhir/StructureDefinition/date" alias date as source
uses "http://hl7.org/fhir/StructureDefinition/instant" alias instant as source

uses "http://hl7.org/cda/stds/core/StructureDefinition/ClinicalDocument" alias ClinicalDocument as target
uses "http://hl7.org/cda/stds/core/StructureDefinition/TS" alias TS as target
uses "http://hl7.org/cda/stds/core/StructureDefinition/AD" alias AD as target


group BundleToCda(source bundle : Bundle, target cda : ClinicalDocument) {
  bundle ->  cda.recordTarget as recordTarget,  cda.author as author then BundleToClinicalDocument(bundle, recordTarget, author, cda) "bundle";
}

group BundleToClinicalDocument(source bundle : Bundle, target recordTarget : RecordTarget, target author : Author, target cda : ClinicalDocument) {
  bundle -> cda.typeId as typeId then {
    bundle -> typeId.root = '2.16.840.1.113883.1.3' "root";
    bundle -> typeId.extension = 'POCD_HD000040' "extension";
  } "typeId";
  bundle.identifier as identifier -> cda.id as id then IdentifierII(identifier, id) "id";
  bundle.timestamp as timestamp -> cda.effectiveTime as effectiveTime then InstantTS(timestamp, effectiveTime) "effectiveTime";
  bundle.entry as entry then {
    entry.resource as resource where $this.ofType(FHIR.Composition) then CompositionClinicalDocument(bundle, resource, recordTarget, author, cda);
  };
}

group CompositionClinicalDocument(source bundle : Bundle, source composition : Composition, target recordTarget : RecordTarget, target author : Author, target cda : ClinicalDocument) {
  composition.title as title -> cda.title as t then {
    title -> t.xmlText = title "titleInner";
  };
  composition.confidentiality as conf -> cda.confidentialityCode as cdaconf then {
    conf -> cdaconf.code = conf "conf";
    conf -> cdaconf.codeSystem = '2.16.840.1.113883.5.25' "codeSystem";
  } "confidentialityCode";
  composition.language as language ->  cda.languageCode as languageCode,  languageCode.code = language "languageCode";
  bundle.entry as entry then {
    entry.fullUrl where ($this in %composition.subject.reference) and $this.startsWith('urn:uuid') then {
      entry.resource : Patient as patient then PatientRecordTarget(patient, bundle, recordTarget) "patient";
    } "uuid";
    entry.resource as patient where ('Patient' + '/' + $this.id) in %composition.subject.reference then PatientRecordTarget(patient, bundle, recordTarget) "patient";
  } "patient";
}

group PatientRecordTarget(source src : Patient, source bundle : Bundle, target tgt : RecordTarget) {
  src -> tgt.patientRole as patientRole then {
    src.address as address -> patientRole.addr as ad then AddressAD(address, ad);
  } "patientRole";
}

group AddressAD(source src : Address, target tgt : AD) {
  src -> tgt.item as item then {
    src.line as v -> item.streetAddressLine as line, line.xmlText = v "streetAddress";
    src.postalCode as v -> item.postalCode as postalCode, postalCode.xmlText = v "postalCode";
    src.city as v -> item.city as city, city.xmlText = v "city";
    src.state as v -> item.state as state, state.xmlText = v "state";
    src.district as v -> item.county as county, county.xmlText = v "county";
    src.country as v -> item.country as country, country.xmlText = v "country";    
  } "addritem";
}

group InstantTS(source src : instant, target tgt : TS) {
    src.value as v -> tgt.value = v "copy";
}
  
group DateTimeTS(source src : dateTime, target tgt : TS) extends InstantTS <<types>> {
}
  
group DateTS(source src : date, target tgt : TS) extends InstantTS <<types>> {
}

group IdentifierII(source src : Identifier, target tgt : II)  {
    src.value as value where src.system.empty() and src.value.startsWith('urn:uuid:') -> tgt.root = (value.substring(9).upper()) "idAsUuid";
    src.value as value where src.system = 'urn:ietf:rfc:3986' -> tgt.root = (value.substring(9).upper()) "idAsUuid";
    src.value as value where src.system.startsWith('urn:oid:') then {
      src.system as system -> tgt.root = (system.substring(8)), tgt.extension = value "oidident"; 
    } "system";
}
  
